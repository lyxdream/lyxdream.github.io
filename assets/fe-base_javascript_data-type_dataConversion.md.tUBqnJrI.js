import{_ as s,o as a,c as i,R as n}from"./chunks/framework.iNKEMQtI.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"fe-base/javascript/data-type/dataConversion.md","filePath":"fe-base/javascript/data-type/dataConversion.md","lastUpdated":1701769291000}'),l={name:"fe-base/javascript/data-type/dataConversion.md"},e=n(`<h2 id="类型转换" tabindex="-1">类型转换： <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换：&quot;">​</a></h2><h3 id="注意的点" tabindex="-1">注意的点： <a class="header-anchor" href="#注意的点" aria-label="Permalink to &quot;注意的点：&quot;">​</a></h3><ul><li><p>两边出现字符串或者对象都当作字符串处理 对象转数字是先转成字符串，再转换成数字</p><p>（1）先用valueOf()获取对象的原始值</p><p>（2）然后再调用toString()转换成字符串</p></li></ul><p>任何数加NaN都是NaN</p><p>js中的数据类型</p><p>1、基本数据类型 number string boolean null undefined symbol bigint</p><p>2、引用数据类型 object function</p><h3 id="把其他数据类型转换为number类型" tabindex="-1">把其他数据类型转换为Number类型 <a class="header-anchor" href="#把其他数据类型转换为number类型" aria-label="Permalink to &quot;把其他数据类型转换为Number类型&quot;">​</a></h3><pre><code> 1.特定需要转换为Number的
        Number([val])
         parseInt/parseFloat([val])
 2.隐式转换（浏览器内部默认要先转换为Number在进行计算的）
       isNaN([val])
       在==比较的时候，有些值需要转换为数字再进行比较
        null转换成数字是0
        undefined转换成数字是NaN
</code></pre><h3 id="把其它数据类型转换为字符串" tabindex="-1">把其它数据类型转换为字符串 <a class="header-anchor" href="#把其它数据类型转换为字符串" aria-label="Permalink to &quot;把其它数据类型转换为字符串&quot;">​</a></h3><ol><li>能使用的办法</li></ol><ul><li><p>toString()</p></li><li><p>String()</p></li></ul><ol start="2"><li>隐式转换（一般都是调用其toString）</li></ol><ul><li><p>加号运算的时候，如果某一边出现字符串，则是字符串拼接</p></li><li><p>把对象转换为数字，需要先toString()转换为字符串，再去转换为数字</p></li><li><p>基于alert/confirm/prompt/document.write...这些方式输出内容，都是把内容先转换为字符串，然后再输出的</p></li><li><p>...</p></li></ul><h3 id="把其它数据类型转换为布尔" tabindex="-1">把其它数据类型转换为布尔 <a class="header-anchor" href="#把其它数据类型转换为布尔" aria-label="Permalink to &quot;把其它数据类型转换为布尔&quot;">​</a></h3><ol><li>基于以下方式可以把其它数据类型转换为布尔 <ul><li>! 转换为布尔值后取反</li><li>!! 转换为布尔类型</li><li>Boolean([val])</li></ul></li><li>隐式转换 <ul><li>在循环或者条件判断中，条件处理的结果就是布尔类型值</li><li>...</li></ul></li></ol><blockquote><p>规则：只有 ‘0、NaN、null、undefined、空字符串’ 五个值会变为布尔的FALSE，其余都是TRUE</p></blockquote><h3 id="在-比较的过程中-数据转换的规则" tabindex="-1">在==比较的过程中，数据转换的规则： <a class="header-anchor" href="#在-比较的过程中-数据转换的规则" aria-label="Permalink to &quot;在==比较的过程中，数据转换的规则：&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> 【类型一样的几个特殊点】</span></span>
<span class="line"><span>      {}=={}：false  对象比较的是堆内存的地址</span></span>
<span class="line"><span>      []==[]：false</span></span>
<span class="line"><span>      NaN==NaN：false</span></span>
<span class="line"><span> 【类型不一样的转换规则】</span></span>
<span class="line"><span> 1. null==undefined：true，但是换成===结果是false（因为类型不一致），剩下null/undefined和其它任何</span></span>
<span class="line"><span> 2. 字符串==对象  要把对象转换为字符串</span></span>
<span class="line"><span> 3. 剩下如果==两边数据类型不一致，都是需要转换为数字再进行比较</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="number" tabindex="-1">Number() <a class="header-anchor" href="#number" aria-label="Permalink to &quot;Number()&quot;">​</a></h3><pre><code>忽略前导的零
</code></pre><p>（1）如果是Boolean值，true =&gt; 1 false=&gt; 0</p><pre><code>(2)如果是null，返回0

(3)如果是undefined, 返回NaN

(4)如果是数字，只是简单的传入和返回

(5)如果是字符串：
</code></pre><p>如果字符串中只包含数字，（包括前面带负号或正号的情况），则将其转换为10进制数。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 如：</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;011&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  （注意：前导的零被忽略了）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果字符串中包含有效的十六进制。则将其转换为相同大小的10进制</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  如Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;oxf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 15</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果字符串中包含有效的浮点格式，则将其转换为对应的浮点数值</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     如： </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.11&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     而 </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.11.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NaN</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果字符串是空的，则将其转换为0 如果字符串中包含上述格式之外的字符，则将其转换为NaN</p><blockquote><p>注意：此时Number(&quot;011&quot;)转换为11而不是9，此时的&quot;011&quot;被当作十进制而不是八进制，而Number(011)则等于9，此时的011则是被当作八进制转换为十进制</p></blockquote><p>(6)如果是对象，先调用对象的valueOf()方法，然后确定该方法返回的数值是否可以转化为数值，如果不能则基于这个返回值再调用toString()的方法，再测试返回值。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello world!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//NaN</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;000011&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//11</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="parseint-value" tabindex="-1">parseInt([value]) <a class="header-anchor" href="#parseint-value" aria-label="Permalink to &quot;parseInt([value])&quot;">​</a></h3><p>把value转换成数字（内存机制，需要先把value先变为字符串，然后从字符串左侧第一个字符左侧第一个字符查找，把找到的有效数字字符转换为数字，直到遇到一个非有效数字字符为止）</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([value],[n]) 把[value]看做[n]进制的数据，最后转换为十进制</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      [n]不写：默认是10，特殊情况字符串是以0X开头，默认值是16进制</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      [n]范围 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">36之间 不在这个之间的 除了0和10一样,剩下结果都是NaN</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//NaN</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//NaN</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,36),p=[e];function t(h,r,k,d,o,u){return a(),i("div",null,p)}const g=s(l,[["render",t]]);export{c as __pageData,g as default};

import{_ as s,o as a,c as n,R as i,ap as e,aq as l,ar as p,as as t,at as r,au as o,av as c,aw as h}from"./chunks/framework.iNKEMQtI.js";const q=JSON.parse('{"title":"git commit 规范","description":"","frontmatter":{},"headers":[],"relativePath":"note/gitCommit.md","filePath":"note/gitCommit.md","lastUpdated":1701769291000}'),m={name:"note/gitCommit.md"},d=i(`<h1 id="git-commit-规范" tabindex="-1">git commit 规范 <a class="header-anchor" href="#git-commit-规范" aria-label="Permalink to &quot;git commit 规范&quot;">​</a></h1><h2 id="cz-demo" tabindex="-1">cz-demo <a class="header-anchor" href="#cz-demo" aria-label="Permalink to &quot;cz-demo&quot;">​</a></h2><p><strong>具体实现过程github地址<a href="https://github.com/lyxdream/cz-demo" target="_blank" rel="noreferrer">git-cz+ commitizen + cz-conventional-changelog)(Commitizen: 替代 git commit) + (@commitlint/config-conventional @commitlint/cli)(commit lint 校验规则 ) +husky( commit message 时触发检验规则 )+ conventional-changelog/standard-version(自动生成 CHANGELOG) </a></strong></p><h3 id="commit-message-作用" tabindex="-1">commit message 作用 <a class="header-anchor" href="#commit-message-作用" aria-label="Permalink to &quot;commit message 作用&quot;">​</a></h3><ul><li>根据 commit message 自动生成 CHANGELOG.md</li><li>基于提交的类型，自动决定语义化的版本变更。</li><li>向同事、公众与其他利益关系者传达变化的性质。</li><li>触发构建和部署流程。</li></ul><h3 id="commit-message-格式" tabindex="-1">commit message 格式 <a class="header-anchor" href="#commit-message-格式" aria-label="Permalink to &quot;commit message 格式&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span></span>
<span class="line"><span>// 空一行</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;body&gt;</span></span>
<span class="line"><span>// 空一行</span></span>
<span class="line"><span>&lt;footer&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>大致分为三个部分(使用空行分割): 标题行:描述主要修改类型和范围以及描述. body: commit 具体修改内容, 描述为什么修改, 做了什么样的修改, 以及开发的思路等等,可以分为多行. footer: 一些备注或修复的 bug 的链接. 其中 标题行 是必填，body 和 footer 是选填。</p><h4 id="标题行-包括三个字段-type-必填-、scope-选填-和-subject-必填" tabindex="-1">标题行 包括三个字段：type（必填）、scope（选填）和 subject（必填） <a class="header-anchor" href="#标题行-包括三个字段-type-必填-、scope-选填-和-subject-必填" aria-label="Permalink to &quot;标题行 包括三个字段：type（必填）、scope（选填）和 subject（必填）&quot;">​</a></h4><p>scope: commit 影响的范围, 比如: route, component, utils, build... subject: commit 的概述 以动词开头，使用第一人称现在时，比如 change，而不是 changed 或 changes 第一个字母小写 结尾不加句号（.）</p><p>type 用于说明 commit 的类别 type 为 feat 和 fix，则该 commit 将肯定出现在 Change log 之中。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>feat：新功能（Features）</span></span>
<span class="line"><span>fix: 修改 bug（Bug Fixes）</span></span>
<span class="line"><span>perf: 更改代码，以提高性能(Performance Improvements)</span></span>
<span class="line"><span>refactor: 代码重构（重构，在不影响代码内部行为、功能下的代码修改）(Code Refactoring)</span></span>
<span class="line"><span>docs: 文档修改(Documentation)</span></span>
<span class="line"><span>style: 代码格式修改, 注意不是 css 修改（空白、格式化、缺少分号等）(Styles)</span></span>
<span class="line"><span>test: 测试用例新增、修改（Tests）</span></span>
<span class="line"><span>build: 影响项目构建或依赖项修改(示例范围：gulp、npm)</span></span>
<span class="line"><span>revert: 恢复上一次提交</span></span>
<span class="line"><span>ci: 持续集成相关文件修改(示例范围：Travis、Circle、BrowserStack、SauceLabs)（Continuous Integration）</span></span>
<span class="line"><span>chore: 构建过程或辅助工具的变动（chore）</span></span>
<span class="line"><span>release: 发布新版本</span></span>
<span class="line"><span>workflow: 工作流相关文件修改</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="body" tabindex="-1">Body <a class="header-anchor" href="#body" aria-label="Permalink to &quot;Body&quot;">​</a></h4><p>Body 部分是对本次 commit 的详细描述，可以分成多行。 有两个注意点。</p><p>（1）使用第一人称现在时，比如使用 change 而不是 changed 或 changes。</p><p>（2）应该说明代码变动的动机，以及与以前行为的对比。</p><h4 id="footer" tabindex="-1">Footer <a class="header-anchor" href="#footer" aria-label="Permalink to &quot;Footer&quot;">​</a></h4><p>Footer 部分只用于两种情况。</p><p>1）不兼容变动 如果当前代码与上一个版本不兼容，则 Footer 部分以 BREAKING CHANGE 开头，后面是对变动的描述、以及变动理由和迁移方法。</p><p>2）关闭 Issue 如果当前 commit 针对某个 issue，那么可以在 Footer 部分关闭这个 issue 。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Closes #234</span></span>
<span class="line"><span>也可以一次关闭多个 issue 。</span></span>
<span class="line"><span>Closes #123, #245, #992</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Revert 还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以 revert: 开头，后面跟着被撤销 Commit 的 Header。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>revert: feat(pencil): add &#39;graphiteWidth&#39; option</span></span>
<span class="line"><span>This reverts commit 667ecc1654a317a13331b17617d973392f415f02.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>此时 Body 部分的格式是固定的，必须写成 This reverts commit &lt;hash&gt;. ，其中的 hash 是被撤销 commit 的 SHA 标识符。 如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的 Reverts 小标题下面。</p><p>提示：Commitizen 替代你的 git commit (使用工具生成符合规范的 commit message) 那么就需要通过 commitizen/cz-cli 工具，我们需要借助它提供的 git cz 命令替代我们之前的 git commit 命令, 帮助我们生成符合规范的 commit message .</p><blockquote><p>使用终端工具 (git-cz+ commitizen + cz-conventional-changelog)(Commitizen: 替代 git commit) + (@commitlint/config-conventional @commitlint/cli)(commit lint 校验规则 ) +husky( commit message 时触发检验规则 )+ conventional-changelog/standard-version(自动生成 CHANGELOG) 一步解决提交信息和版本发布。</p></blockquote><h3 id="工具集示例-包含以下工具类型" tabindex="-1">工具集示例，包含以下工具类型： <a class="header-anchor" href="#工具集示例-包含以下工具类型" aria-label="Permalink to &quot;工具集示例，包含以下工具类型：&quot;">​</a></h3><ul><li>适配器：用于配置 cz 的提交说明</li><li>校验：校验提交说明是否符合规范</li><li>日志：根据提交说明的类型快速生成日志</li></ul><h3 id="自动生成合格的-commit-message" tabindex="-1">自动生成合格的 commit message <a class="header-anchor" href="#自动生成合格的-commit-message" aria-label="Permalink to &quot;自动生成合格的 commit message&quot;">​</a></h3><p>1、全局安装</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git-cz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2、 局部安装</p><p><code>安装 git-cz 和 commitize、 cz-conventional-changelog</code></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  git-cz</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 安装commitizen 用于初始化commit的规范</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commitizen</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用cz-conventional-changelog 规范(默认定义好了一系列规则)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#初始化项目以使用cz-conventional-changelog适配器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">commitizen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cz-conventional-changelog</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-exact</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>给命令行小白得一个小贴士： 如果使用--save-exact 参数，会在 package.json 文件指定安装模块的确切版本。</p></blockquote><blockquote><p>–save：模块名将被添加到 dependencies，可以简化为参数-S。</p></blockquote><blockquote><p>–save-dev: 模块名将被添加到 devDependencies，可以简化为参数-D。</p></blockquote><p>执行上面安装完成后 package.json 中会自动添加以下内容</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;devDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;git-cz&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^4.7.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;cz-conventional-changelog&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^3.3.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;commitizen&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./node_modules/cz-conventional-changelog&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>3、 自定义配置，新增 <a href="https://github.com/lyxdream/cz-demo/blob/main/changelog.config.js" target="_blank" rel="noreferrer">changelog.config.js</a></p><blockquote><p>changelog 配置，commit 规则也在这里进行配置 参考文档：<a href="https://www.npmjs.com/package/git-cz" target="_blank" rel="noreferrer">https://www.npmjs.com/package/git-cz</a></p></blockquote><p>4、使用 git-cz</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;commit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;git-cz&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>执行 <code>npm git-cz</code> 或者执行<code>npm run commit</code> 效果如下 配置changelog.config.js之前的效果： <img src="`+e+'" alt="图片1"></p><p><img src="'+l+'" alt="图片2"></p><p><img src="'+p+'" alt="图片3"></p><p>配置changelog.config.js之后的效果：</p><p><img src="'+t+`" alt="图片4"></p><h3 id="commit-message-lint-校验" tabindex="-1">commit message lint 校验 <a class="header-anchor" href="#commit-message-lint-校验" aria-label="Permalink to &quot;commit message lint 校验&quot;">​</a></h3><h4 id="安装-commit-lint-工具" tabindex="-1">安装 commit lint 工具 <a class="header-anchor" href="#安装-commit-lint-工具" aria-label="Permalink to &quot;安装 commit lint 工具&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @commitlint/cli</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="commit-lint-常用配置" tabindex="-1">commit lint 常用配置 <a class="header-anchor" href="#commit-lint-常用配置" aria-label="Permalink to &quot;commit lint 常用配置&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @commitlint/config-conventional</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="安装-husky-以在-commit-message-时触发检验规则" tabindex="-1">安装 husky，以在 commit message 时触发检验规则 <a class="header-anchor" href="#安装-husky-以在-commit-message-时触发检验规则" aria-label="Permalink to &quot;安装 husky，以在 commit message 时触发检验规则&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行上面安装完成后 package.json 中会自动添加以下内容</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;devDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;@commitlint/cli&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^11.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;@commitlint/config-conventional&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^11.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;husky&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^4.3.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="在项目中新建-commitlint-config-js-文件并设置校验规则" tabindex="-1">在项目中新建 commitlint.config.js 文件并设置校验规则： <a class="header-anchor" href="#在项目中新建-commitlint-config-js-文件并设置校验规则" aria-label="Permalink to &quot;在项目中新建 commitlint.config.js 文件并设置校验规则：&quot;">​</a></h4><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // commit lint 校验规则继承</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    extends: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@commitlint/config-conventional&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 自定义校验规则</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> feat：新功能（Features）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">fix: 修改 bug（Bug Fixes）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">perf: 更改代码，以提高性能(Performance Improvements)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">refactor: 代码重构（重构，在不影响代码内部行为、功能下的代码修改）(Code Refactoring)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">docs: 文档修改(Documentation)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">style: 代码格式修改, 注意不是 css 修改（空白、格式化、缺少分号等）(Styles)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">test: 测试用例新增、修改（Tests）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">build: 影响项目构建或依赖项修改(示例范围：gulp、npm)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">revert: 恢复上一次提交</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">ci: 持续集成相关文件修改(示例范围：Travis、Circle、BrowserStack、SauceLabs)（Continuous Integration）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">chore: 构建过程或辅助工具的变动（chore）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">release: 发布新版本</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">workflow: 工作流相关文件修改</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h4 id="配置-husky" tabindex="-1">配置 husky <a class="header-anchor" href="#配置-husky" aria-label="Permalink to &quot;配置 husky&quot;">​</a></h4><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;husky&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;hooks&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;commit-msg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;commitlint -E HUSKY_GIT_PARAMS&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>&quot;commit-msg&quot;: &quot;commitlint -E HUSKY_GIT_PARAMS&quot; 在 git commit 时执行 commitlint -E HUSKY_GIT_PARAMS 验证 commit 消息。如果不符合定义的格式，将会报错。</p></blockquote><p>配置完成后，每次 commit 就会进行校验，校验不通过会拦截 commit</p><p>运行结果如下:</p><p><img src="`+r+`" alt="图片5"></p><blockquote><p>会发现出现了husky校验</p></blockquote><h3 id="生成-changelog-md" tabindex="-1">生成 CHANGELOG.md <a class="header-anchor" href="#生成-changelog-md" aria-label="Permalink to &quot;生成 CHANGELOG.md&quot;">​</a></h3><p>1、使用 standard-version 来生成 CHANGELOG.md 安装使用:</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> standard-version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行上面安装完成后 package.json 中会自动添加以下内容</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;standard-version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^9.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>package.json 配置:</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scirpt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">   ...,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;release&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;standard-version&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>执行 npm run release 就会生成 CHANGELOG.md</p><p>上面命令不会覆盖以前的 Change log，只会在 CHANGELOG.md 的头部加上自从上次发布以来的变动。</p><blockquote><p>type 为 feat 和 fix，则该 commit 将肯定出现在 Change log 之中。 standard-version 有很多功能，点击查看官方文档: <a href="https://www.npmjs.com/package/standard-version" target="_blank" rel="noreferrer">standard-version</a></p></blockquote><p>2、用 conventional-changelog 生成 Change log</p><blockquote><p>conventional-changelog 是一款可以根据项目的 commit 和 metadata 信息自动生成 changelogs 和 release notes 的系列工具，并且在辅助 standard-version 工具的情况下，可以自动帮你完成生成 version、打 tag, 生成 CHANGELOG 等系列过程。</p></blockquote><h5 id="conventional-changelog-生态主要模块" tabindex="-1">conventional-changelog 生态主要模块 <a class="header-anchor" href="#conventional-changelog-生态主要模块" aria-label="Permalink to &quot;conventional-changelog 生态主要模块&quot;">​</a></h5><ul><li>conventional-changelog-cli - conventional-changelog 核心命令行工具</li><li>standard-changelog - 针对 angular commit 格式的命令行工具</li><li>conventional-github-releaser - 利用 git metadata 针对 Github 的发布工具</li><li>conventional-commits-detector - commit message 规范引用检测</li><li>commitizen - 针对开发者简单的 commit 规范</li><li>commitlint - commit Lint 工具</li></ul><h4 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> conventional-changelog-cli</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">​</a></h4><blockquote><p>conventional-changelog -p angular -i CHANGELOG.md -s 上面命令不会覆盖以前的 Change log，只会在 CHANGELOG.md 的头部加上自从上次发布以来的变动。</p></blockquote><blockquote><p>如果想生成所有发布的 Change log，要改为运行下面的命令。</p></blockquote><p><code>conventional-changelog -p angular -i CHANGELOG.md -s -r 0</code></p><p>为了方便使用，可以将其写入 package.json 的 scripts 字段。</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;changelog&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;conventional-changelog -p angular -i CHANGELOG.md -s -r 0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>注意：</p><blockquote><ul><li>type 为 feat 和 fix，perf，revert，则该 commit 将肯定出现在 Change log 之中。</li><li>type 为 chore,ci,docs,refactor,style,test 加了 BREAKING CHANGES 会进去，不加不进去。</li><li>release 不会出现在选择列表里目前没找到原因</li></ul></blockquote><blockquote><p>区别：conventional-changelog 我目前没找到变更版本号的地方，standard-version 可以更新版本号的变化。 如果想测试，演示项目地址：<a href="https://github.com/lyxdream/cz-demo.git" target="_blank" rel="noreferrer">cz-demo</a></p></blockquote><p>生成的日志可查看示例：<a href="https://github.com/lyxdream/cz-demo/blob/main/CHANGELOG.md" target="_blank" rel="noreferrer">CHANGELOG</a></p><p>最后：</p><p>参考文章</p><p><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" target="_blank" rel="noreferrer">阮一峰 Commit message 和 Change log 编写指南</a></p><p><a href="https://my.oschina.net/u/4291707/blog/3315002" target="_blank" rel="noreferrer">如何规范 commit 提交</a></p><p><a href="https://www.yuque.com/hutao/eusgif/ueqoaf" target="_blank" rel="noreferrer">commit 规范及自动生成 changelog</a></p><p><a href="https://juejin.im/post/6844904033635794958" target="_blank" rel="noreferrer">git commit 规范及自动检查工具安装小记</a></p><h2 id="customizable-example" tabindex="-1">customizable-example <a class="header-anchor" href="#customizable-example" aria-label="Permalink to &quot;customizable-example&quot;">​</a></h2><p>采用了cz-customizable定制化提交说明的适配器、commitlint-config-cz @commitlint/cli+husky校验规则以及conventional-changelog日志生成器</p><h3 id="自定义-adapter" tabindex="-1">自定义 Adapter <a class="header-anchor" href="#自定义-adapter" aria-label="Permalink to &quot;自定义 Adapter&quot;">​</a></h3><blockquote><p>有时候angular团队的那套规范会不合适自己团队的要求，这时候就需要定制一套自己的commit规范，cz-customizable是commitizen 的一个 adapter，格式类似上面的 cz-conventional-changelog ，但提供一定程度的自定义。</p></blockquote><p>1、安装</p><pre><code>\`\`\`bash

npm i -g cz-customizable
//or
npm i -D cz-customizable
</code></pre><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>修改 .czrc 或 package.json 中的 config 为:</span></span>
<span class="line"><span>\`\`\`json </span></span>
<span class="line"><span>{ &quot;path&quot;: &quot;cz-customizable&quot; }</span></span>
<span class="line"><span>or</span></span>
<span class="line"><span>  &quot;config&quot;: {</span></span>
<span class="line"><span>    &quot;commitizen&quot;: {</span></span>
<span class="line"><span>      &quot;path&quot;: &quot;node_modules/cz-customizable&quot;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>向 package.json 添加新的 script：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;commit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;git-cz&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>执行<code>npm run commit</code> 就可以自动生成合格的 commit message</p><blockquote><p>cz-customizable 自定义配置可以对上面的 type、scope、subject、body等进行设置与限定，例如设置type的种类、subject的字数、body的换行符等。 方法是在项目根目录下新建 <a href="./.cz-config.js">.cz-config.js</a> 配置文件，在该文件中对上述字段设置规则。官方github上有给出该文件写法的一个示例。 官方提供了一个.cz-config.js示例文件<a href="https://github.com/leoforfree/cz-customizable/blob/master/cz-config-EXAMPLE.js" target="_blank" rel="noreferrer">cz-config-EXAMPLE.js</a>，</p></blockquote><p>拓展了几个type类型，并对提示语进行了汉化。最后执行 npm run commit</p><blockquote><p>图标可以从找个网站找：<a href="https://emojipedia.org/objects/" target="_blank" rel="noreferrer">emoji图标</a></p></blockquote><p>运行效果如下：</p><p><img src="`+o+`" alt="图片1"></p><h3 id="commitlint-校验你的-message" tabindex="-1">Commitlint: 校验你的 message <a class="header-anchor" href="#commitlint-校验你的-message" aria-label="Permalink to &quot;Commitlint: 校验你的 message&quot;">​</a></h3><pre><code>\`\`\`bash
  npm i -D commitlint-config-cz @commitlint/cli
</code></pre><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&gt; commitlint-config-cz 合并 cz-customizable 的配置 {types,scopes,scopeOverrides} 和 commitlint 的配置 {type-enum,scope-enum}。这样，你就可以在一个地方维护 types 和 scopes。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#### 在项目中新建 commitlint.config.js 文件并设置校验规则：</span></span>
<span class="line"><span>\`\`\`js</span></span>
<span class="line"><span>module.exports = {</span></span>
<span class="line"><span>extends: [&#39;cz&#39;],</span></span>
<span class="line"><span>rules: {</span></span>
<span class="line"><span> // must add these rules</span></span>
<span class="line"><span> &#39;type-empty&#39;: [2, &#39;never&#39;],</span></span>
<span class="line"><span> &#39;subject-empty&#39;: [2, &#39;never&#39;]</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="安装-husky-以在-commit-message-时触发检验规则-1" tabindex="-1">安装 husky，以在 commit message 时触发检验规则 <a class="header-anchor" href="#安装-husky-以在-commit-message-时触发检验规则-1" aria-label="Permalink to &quot;安装 husky，以在 commit message 时触发检验规则&quot;">​</a></h4><p>1、安装husky</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2、添加 git commit hooks 到 package.json：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  ...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;husky&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;hooks&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;commit-msg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;commitlint -E HUSKY_GIT_PARAMS&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>执行npm run commit,效果如下：</p><p>未配置husky前：</p><p><img src="`+c+'" alt="图片2"></p><p>配置husky之后：</p><p><img src="'+h+`" alt="图片3"></p><h3 id="生成-changelog-md-1" tabindex="-1">生成 CHANGELOG.md <a class="header-anchor" href="#生成-changelog-md-1" aria-label="Permalink to &quot;生成 CHANGELOG.md&quot;">​</a></h3><p>用 conventional-changelog 生成 Change log</p><blockquote><p>conventional-changelog 是一款可以根据项目的 commit 和 metadata 信息自动生成 changelogs 和 release notes 的系列工具，并且在辅助 standard-version 工具的情况下，可以自动帮你完成生成 version、打 tag, 生成 CHANGELOG 等系列过程。</p></blockquote><h4 id="安装-1" tabindex="-1">安装 <a class="header-anchor" href="#安装-1" aria-label="Permalink to &quot;安装&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> conventional-changelog-cli</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="基本使用-1" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用-1" aria-label="Permalink to &quot;基本使用&quot;">​</a></h4><p><code>conventional-changelog -p angular -i CHANGELOG.md -s</code></p><blockquote><p>上面命令不会覆盖以前的 Change log，只会在 CHANGELOG.md 的头部加上自从上次发布以来的变动。</p></blockquote><blockquote><p>如果想生成所有发布的 Change log，要改为运行下面的命令。</p></blockquote><p><code>conventional-changelog -p angular -i CHANGELOG.md -s -r 0</code></p><p>为了方便使用，可以将其写入 package.json 的 scripts 字段。</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;changelog&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;conventional-changelog -p angular -i CHANGELOG.md -s -r 0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>注意：</p><blockquote><ul><li>type 为 feat 和 fix，perf，revert，则该 commit 将肯定出现在 Change log 之中。</li><li>type 为 chore,ci,docs,refactor,style,test 加了 BREAKING CHANGES 会进去，不加不进去。</li><li>release 不会出现在选择列表里目前没找到原因</li></ul></blockquote><p>生成的日志可查看示例：<a href="./CHANGELOG">CHANGELOG.md</a></p><h3 id="扩展" tabindex="-1">扩展： <a class="header-anchor" href="#扩展" aria-label="Permalink to &quot;扩展：&quot;">​</a></h3><h5 id="vscode-commitizen" tabindex="-1">vscode commitizen <a class="header-anchor" href="#vscode-commitizen" aria-label="Permalink to &quot;vscode commitizen&quot;">​</a></h5><blockquote><p>在 VS Code 中搜索装 vscode commitizen，然后就可以摆脱命令行了，而且这个插件是和前面所有的配置兼容的</p></blockquote><h5 id="vue-cli-3-插件" tabindex="-1">Vue CLI 3 插件 <a class="header-anchor" href="#vue-cli-3-插件" aria-label="Permalink to &quot;Vue CLI 3 插件&quot;">​</a></h5><blockquote><p>如果对于上述所说的配置感到繁琐，这里提供一个Vue CLI 3的插件，如果开发的项目由Vue CLI 3系统生成，可以使用插件@ziyi2/ui-cz一键生成：</p></blockquote><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @ziyi2/ui-cz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>该插件采用了cz-customizable定制化提交说明的适配器、@commitlint/config-conventional校验规则以及conventional-changelog日志生成器。</p></blockquote><p>最后：</p><p>参考文章</p><p><a href="https://juejin.im/post/6844903606815064077#heading-10" target="_blank" rel="noreferrer">优雅的提交你的 Git Commit Message</a></p><p><a href="https://blog.csdn.net/weixin_33890526/article/details/91393527" target="_blank" rel="noreferrer">Cz工具集使用介绍 - 规范Git提交说明</a></p>`,152),k=[d];function u(g,b,E,y,v,C){return a(),n("div",null,k)}const f=s(m,[["render",u]]);export{q as __pageData,f as default};
